{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Input","props","className","onSubmit","e","generate","type","min","max","value","paragraphs","onChange","changeParagraphs","required","sentences","changeSentences","words","changeWords","Output","dangerouslySetInnerHTML","__html","generatedText","App","useState","setParagraphs","setSentences","setWords","setGeneratedText","target","preventDefault","loremIpsum","count","parseInt","format","paragraphLowerBound","paragraphUpperBound","sentenceLowerBound","sentenceUpperBound","units","suffix","el","ReactDOM","render","document","getElementById"],"mappings":"6LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,cCDd,SAASQ,EAAMC,GACb,OAAO,sBAAKC,UAAU,QAAf,UACL,uDACA,uBAAMC,SAAU,SAAAC,GAAC,OAAIH,EAAMI,SAASD,IAApC,UACE,gCACE,kCACA,+BACE,6CACA,6BACA,uBAAOE,KAAK,SAASC,IAAK,EAAGC,IAAK,GAAIC,MAAOR,EAAMS,WAAYC,SAAU,SAAAP,GAAC,OAAIH,EAAMW,iBAAiBR,IAAIS,UAAQ,SAGnH,+BACE,0DACA,6BACA,uBAAOP,KAAK,SAASC,IAAK,EAAGC,IAAK,GAAIC,MAAOR,EAAMa,UAAWH,SAAU,SAAAP,GAAC,OAAIH,EAAMc,gBAAgBX,WAGrG,+BACE,qDACA,6BACA,uBAAOE,KAAK,SAASC,IAAK,EAAGC,IAAK,GAAIC,MAAOR,EAAMe,MAAOL,SAAU,SAAAP,GAAC,OAAIH,EAAMgB,YAAYb,gBAK/F,uBACA,uBAAOE,KAAK,SAASG,MAAM,mBAKjC,SAASS,EAAOjB,GACd,OAAO,qBAAKC,UAAU,SAASiB,wBAAyB,CAACC,OAAOnB,EAAMoB,iBAGxE,SAASC,IAEP,MAAkCC,mBAAS,IAA3C,mBAAKb,EAAL,KAAiBc,EAAjB,KAEA,EAAgCD,mBAAS,IAAzC,mBAAKT,EAAL,KAAgBW,EAAhB,KAEA,EAAuBF,mBAAS,IAAhC,mBAAIP,EAAJ,KAAWU,EAAX,KAGA,EAAwCH,mBAAS,IAAjD,mBAAKF,EAAL,KAAoBM,EAApB,KAmBA,OAAO,sBAAKzB,UAAU,YAAf,UACL,cAACF,EAAD,CACAU,WAAYA,EACZI,UAAWA,EACXE,MAAOA,EACPJ,iBA9BuB,SAAAR,GAAC,OAAIoB,EAAcpB,EAAEwB,OAAOnB,QA+BnDM,gBA7BsB,SAAAX,GAAC,OAAIqB,EAAarB,EAAEwB,OAAOnB,QA8BjDQ,YA5BkB,SAAAb,GAAC,OAAIsB,EAAStB,EAAEwB,OAAOnB,QA6BzCJ,SAzBF,SAAkBD,GAChBA,EAAEyB,iBAGFF,EAAiBG,qBAAW,CAC1BC,MAAMC,SAAStB,GACfuB,OAAO,OACPC,oBAAqBpB,EAAYkB,SAASlB,GAAa,EACvDqB,oBAAqBrB,EAAYkB,SAASlB,GAAa,EACvDsB,mBAAoBpB,EAAQgB,SAAShB,GAAS,EAC9CqB,mBAAoBrB,EAAQgB,SAAShB,GAAS,GAC9CsB,MAAM,aACNC,OAAO,aAeT,uBACA,cAACrB,EAAD,CACAG,cAAeA,OAOnB,IAAMmB,EAAK,cAAClB,EAAD,IAEXmB,IAASC,OAAOF,EAAIG,SAASC,eAAe,SAK5CrD,M","file":"static/js/main.76ab4c7d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport reportWebVitals from './reportWebVitals';\nimport { loremIpsum } from 'lorem-ipsum';\n\nfunction Input(props){\n  return <div className=\"input\">\n    <h2>Lorem Ipsum Generator</h2>\n    <form onSubmit={e => props.generate(e)}>\n      <table>\n        <tbody>\n        <tr>\n          <td>Paragraphs:</td>\n          <td>\n          <input type=\"number\" min={1} max={99} value={props.paragraphs} onChange={e => props.changeParagraphs(e)} required/>\n          </td>\n        </tr>\n        <tr>\n          <td>Sentences per Paragraph:</td>\n          <td>\n          <input type=\"number\" min={1} max={99} value={props.sentences} onChange={e => props.changeSentences(e)}/>\n          </td>\n        </tr>\n        <tr>\n          <td>Words per Sentence:</td>\n          <td>\n          <input type=\"number\" min={1} max={99} value={props.words} onChange={e => props.changeWords(e)}/>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n      <br/>\n      <input type=\"submit\" value=\"Generate\"/>\n    </form>\n  </div>\n}\n\nfunction Output(props){\n  return <div className=\"output\" dangerouslySetInnerHTML={{__html:props.generatedText}}></div>\n}\n\nfunction App(){\n\n  let [paragraphs, setParagraphs] = useState(\"\");\n  const changeParagraphs = e => setParagraphs(e.target.value); \n  let [sentences, setSentences] = useState(\"\");\n  const changeSentences = e => setSentences(e.target.value);\n  let[words, setWords] = useState(\"\");\n  const changeWords = e => setWords(e.target.value);\n\n  let [generatedText, setGeneratedText] = useState(\"\");\n\n  function generate(e){\n    e.preventDefault();\n\n\n    setGeneratedText(loremIpsum({\n      count:parseInt(paragraphs),\n      format:\"html\",\n      paragraphLowerBound: sentences ? parseInt(sentences) : 3,\n      paragraphUpperBound: sentences ? parseInt(sentences) : 7,\n      sentenceLowerBound: words ? parseInt(words) : 5,   // Min. number of words per sentence.\n      sentenceUpperBound: words ? parseInt(words) : 15,  // Max. number of words per sentence.\n      units:\"paragraphs\",\n      suffix:\"\\n\\n\"\n    }));\n\n  }\n\n  return <div className=\"container\">\n    <Input \n    paragraphs={paragraphs} \n    sentences={sentences}\n    words={words}\n    changeParagraphs={changeParagraphs} \n    changeSentences={changeSentences}\n    changeWords={changeWords}\n    generate={generate}\n    />\n    <br/>\n    <Output\n    generatedText={generatedText}\n    />\n  </div>\n  \n}\n\n\nconst el = <App/>;\n\nReactDOM.render(el, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}